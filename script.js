const boardSize = 8; // –†–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏
const mineCount = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
const board = document.getElementById('game-board');
const mineCounter = document.getElementById('mine-counter');
let minePositions = [];
let revealedCells = 0;
let flags = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
function createBoard() {
    board.innerHTML = '';
    minePositions = generateMines();
    revealedCells = 0;
    flags = 0;

    updateMineCounter();

    for (let i = 0; i < boardSize * boardSize; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.dataset.index = i;
        cell.addEventListener('click', handleLeftClick);
        cell.addEventListener('contextmenu', handleRightClick); // –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
        board.appendChild(cell);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º–∏–Ω
function generateMines() {
    const mines = new Set();
    while (mines.size < mineCount) {
        mines.add(Math.floor(Math.random() * boardSize * boardSize));
    }
    return Array.from(mines);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π (–æ—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏)
function handleLeftClick(e) {
    const index = parseInt(e.target.dataset.index);

    if (minePositions.includes(index)) {
        revealAllMines(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
        alert('–ú–∏–Ω–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
        createBoard(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    } else {
        revealCell(e.target, index);
        if (revealedCells === boardSize * boardSize - mineCount) {
            alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!');
            createBoard();
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞)
function handleRightClick(e) {
    e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏
    const cell = e.target;

    if (!cell.classList.contains('revealed')) {
        cell.classList.toggle('flag');
        flags += cell.classList.contains('flag') ? 1 : -1;

        if (flags > mineCount) {  // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–≥–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
            flags = mineCount;
            updateMineCounter();
            return;
        }

        checkForGameOver();
        updateMineCounter();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–Ω
function updateMineCounter() {
    mineCounter.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω: ${mineCount - flags}`;
}

// –†–∞—Å–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏ –∏ –µ—ë —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –º–∏–Ω
function revealCell(cell, index) {
    if (cell.classList.contains('revealed') || cell.classList.contains('flag')) return;

    cell.classList.add('revealed');
    revealedCells++;

    const adjacentMines = countAdjacentMines(index);

    if (adjacentMines > 0) {
        cell.textContent = adjacentMines;
        cell.classList.add(`mine-count-${adjacentMines}`);
    } else {
        const neighbors = getNeighbors(index);
        neighbors.forEach(neighborIndex => {
            const neighborCell = document.querySelector(`.cell[data-index='${neighborIndex}']`);
            revealCell(neighborCell, neighborIndex);
        });
    }
}

// –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
function countAdjacentMines(index) {
    return getNeighbors(index).reduce((count, neighborIndex) => {
        return count + (minePositions.includes(neighborIndex) ? 1 : 0);
    }, 0);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
function getNeighbors(index) {
    const neighbors = [];
    const row = Math.floor(index / boardSize);
    const col = index % boardSize;

    for (let dx = -1; dx <= 1; dx++) {
        for (let dy = -1; dy <= 1; dy++) {
            if (dx === 0 && dy === 0) continue;
            const newRow = row + dx;
            const newCol = col + dy;

            if (newRow >= 0 && newRow < boardSize && newCol >= 0 && newCol < boardSize) {
                neighbors.push(newRow * boardSize + newCol);
            }
        }
    }
    return neighbors;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
function checkForGameOver() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Å–µ —Ñ–ª–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (flags === mineCount) {
        let correctFlags = 0;
        document.querySelectorAll('.cell').forEach(cell => {
            if (cell.classList.contains('flag')) {
                const index = parseInt(cell.dataset.index);
                if (minePositions.includes(index)) {
                    correctFlags++;
                }
            }
        });

        if (correctFlags === mineCount) {
            alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!');
            createBoard();
        } else {
            revealAllMines();
            alert('–û—à–∏–±–∫–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
            createBoard();
        }
    }
}

// –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∏–Ω (–ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏)
function revealAllMines() {
    minePositions.forEach(mineIndex => {
        const mineCell = document.querySelector(`.cell[data-index='${mineIndex}']`);
        
        if (mineCell && !mineCell.classList.contains('revealed')) {
            mineCell.classList.add('revealed');
            mineCell.textContent = 'üí£';  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –º–∏–Ω—É (üí£) –≤ —è—á–µ–π–∫—É
            mineCell.classList.add('mine');  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–∏–Ω
        }
    });
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
createBoard();
